{"version":3,"sources":["images/homeDog.jpg","images/twoDog.jpg","images/threeDog.jpg","images/oneDog.jpg","images/goodDog.png","pages/HomePage.js","pages/SecondPage.js","pages/ThirdPage.js","components/Nav.js","pages/FirstPage.js","pages/SecretPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","src","HomeDog","alt","width","Component","SecondPage","TwoDogs","ThirdPage","ThreeDog","Nav","to","FirstPage","OneDog","SecretPage","GoodDog","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,qOCe5BC,EAZf,uKAEI,OACE,6BACE,qDACA,6HACA,yBAAKC,IAAKC,IAASC,IAAI,mBAAmBC,MAAM,aANxD,GAA8BC,a,iBCAf,SAASC,IACtB,OACE,6BACE,wCACA,oDACA,yBAAKL,IAAKM,IAASJ,IAAI,WAAWC,MAAM,S,qBCL/B,SAASI,IACtB,OACE,6BACE,0CACA,0DACA,yBAAKP,IAAKQ,IAAUN,IAAI,aAAaC,MAAM,SCL1C,IAqBQM,EArBf,uKAEI,OACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,cAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,eAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,oBAdV,GAAyBN,a,iBCAV,SAASO,IACtB,OACE,6BACE,wCACA,sCACA,yBAAKX,IAAKY,IAAQV,IAAI,UAAUC,MAAM,S,qBCO7BU,EAZf,uKAEI,OACE,6BACE,0CACA,kEACA,yBAAKb,IAAKc,IAASZ,IAAI,oBAAoBC,MAAM,aANzD,GAAgCC,aCyBjBW,MAlBf,WACE,OACE,yBAAKC,UAAU,OACb,oDACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,OAAOC,UAAWR,IACpC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,OAAOC,UAAWd,IACpC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,SAASC,UAAWZ,IACtC,kBAAC,IAAD,CAAOY,UAAWN,QCTRO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5346de72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeDog.e2007e16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/twoDog.d7a2f679.jpg\";","module.exports = __webpack_public_path__ + \"static/media/threeDog.ac047e02.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oneDog.46ee4150.jpg\";","module.exports = __webpack_public_path__ + \"static/media/goodDog.a8395b00.png\";","import React, { Component } from 'react'\nimport HomeDog from '../images/homeDog.jpg'\n\nexport class HomePage extends Component {\n  render() {\n    return (\n      <div>\n        <h1>This is the Home Page</h1>\n        <p>The home page is where you land when you get to the site or when you navigate to the root url.</p>\n        <img src={HomeDog} alt=\"Home Dog is Home\" width=\"500\" />\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import React from 'react'\nimport TwoDogs from '../images/twoDog.jpg'\n\nexport default function SecondPage() {\n  return (\n    <div>\n      <h1>Page Two</h1>\n      <p>Two dogs on page two.</p>\n      <img src={TwoDogs} alt=\"Two Dogs\" width=\"500\" />\n    </div>\n  )\n}\n","import React from 'react'\nimport ThreeDog from '../images/threeDog.jpg'\n\nexport default function ThirdPage() {\n  return (\n    <div>\n      <h1>Page Three</h1>\n      <p>Three Dogs on Page Three!!!</p>\n      <img src={ThreeDog} alt=\"Three Dogs\" width=\"500\" />\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport class Nav extends Component {\n  render() {\n    return (\n      <ul>\n        <li>\n          <Link to=\"/\">Home Page</Link>\n        </li>\n        <li>\n          <Link to=\"/one\">First Page</Link>\n        </li>\n        <li>\n          <Link to=\"/two\">Second Page</Link>\n        </li>\n        <li>\n          <Link to=\"/three\">Third Page</Link>\n        </li>\n      </ul>\n    )\n  }\n}\n\nexport default Nav\n","import React from 'react'\nimport OneDog from '../images/oneDog.jpg'\n\nexport default function FirstPage() {\n  return (\n    <div>\n      <h1>Page One</h1>\n      <p>One Dog</p>\n      <img src={OneDog} alt=\"One Dog\" width=\"500\" />\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport GoodDog from '../images/goodDog.png'\n\nexport class SecretPage extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Error Page</h1>\n        <p>Your url was invalid.  That's ruff.</p>\n        <img src={GoodDog} alt=\"The Goodest Doggo\" width=\"500\" />\n      </div>\n    )\n  }\n}\n\nexport default SecretPage\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route,Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage'\nimport SecondPage from './pages/SecondPage';\nimport ThirdPage from './pages/ThirdPage';\nimport Nav from './components/Nav';\nimport FirstPage from './pages/FirstPage';\nimport SecretPage from './pages/SecretPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>My Amazing React App</h1>\n      <Router>\n        <Nav /> \n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/one\" component={FirstPage} />\n          <Route exact path=\"/two\" component={SecondPage} />\n          <Route exact path=\"/three\" component={ThirdPage} />\n          <Route component={SecretPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}